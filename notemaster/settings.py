"""
Django settings for untitled project.

Generated by 'django-admin startproject' using Django 1.10.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

log_location = 'logs/'
# importing logger settings
try:
    from .logger_settings import LoggerSettings
except Exception as e:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'd3em^fux$%_2)zgm^g@fuhz@t7hxs=lvp_%0ckg!%yrs42jh$)'
with open(BASE_DIR + '/notemaster/secrets/secret_key.txt') as f:
    SECRET_KEY = f.read().strip()
    f.close()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
CACHE_TIME = 0
cache_location = ''

if 'ENVIRONMENT' in os.environ:
    if os.environ['ENVIRONMENT'] == 'test':
        DEBUG = True
        ALLOWED_HOSTS = []
        CACHE_TIME = 1  # Make the cache expire immediately if we are testing.
        log_location = 'logs/'  # locating the dev logs in the project, because it might not be run on a linux machine.
        # If the debug log folder does not exists, create it.
        if not os.path.exists(os.path.join(BASE_DIR, 'logs/')):
            os.makedirs(os.path.join(BASE_DIR, 'logs/'))

        cache_location = r'C:\temp\notemaster_cache'
    else:
        DEBUG = False
        ALLOWED_HOSTS = ['3.18.188.55', 'einsk.is']
        CACHE_TIME = 60 * 30  # Half an hour of cache lifetime.
        log_location = '/var/log/notemaster/'  # locating the prod logs in the proper log place.
        cache_location = '/tmp/notemaster_cache/'

logger_settings = LoggerSettings(log_location)
LOGGING = logger_settings.get_logger_settings()

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'notes',
    'xml_converter',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'notemaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'notemaster.wsgi.application'

ASGI_APPLICATION = 'notemaster.routing.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# Default database is the test database.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'test': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'test.sqlite3'),
    }
}

if 'ENVIRONMENT' in os.environ:
    # If the environment is prod, use prod database, else use the default test database.
    if os.environ['ENVIRONMENT'] == 'prod':

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'postgres_notes',
                'USER': 'aronws01',
                'PASSWORD': 'CDCBA759EE',
                #'HOST': 'postgres-01.coq0dteq0xmn.us-east-2.rds.amazonaws.com',
                'HOST': 'notemaster-db.coq0dteq0xmn.us-east-2.rds.amazonaws.com',
                'PORT': '5432',
            }
        }

"""DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'mypostgres',
        'USER': 'aronfreyrh',
        'PASSWORD': 'CDCBA759EE',
        'HOST': 'my-postgres-db.ciluljatx7ni.us-east-2.rds.amazonaws.com',
        'PORT': '5432',
    }
}"""


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
LOGIN_REDIRECT_URL = '/notemaster/'
LOGOUT_REDIRECT_URL = 'login_screen'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        #'LOCATION': r'H:\temp\notemaster_cache',
        #'LOCATION': r'C:\temp\notemaster_cache',
        'LOCATION': cache_location
    }
}

# This fixes a problem with the being run twice in Django when it is in debug mode.
# The solution was found here:
# https://stackoverflow.com/questions/26682413/django-rotating-file-handler-stuck-when-file-is-equal-to-maxbytes
if DEBUG and os.environ.get('RUN_MAIN', None) != 'true':
    LOGGING = {}

# Todo: add production cache location.
